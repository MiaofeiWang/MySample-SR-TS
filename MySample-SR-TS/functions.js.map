{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions/./src/functions/functions.ts","webpack://excel-custom-functions/./src/functions/sampleLinkedEntity.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/// <reference path=\"../office-experiment52.d.ts\" />\n\nimport path from \"path\";\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * @customfunction\n * @param {any[]} input \n * @param {CustomFunctions.Invocation} invocation \n * @returns {Promise<string>} Concate the input array.\n * @requiresParameterAddresses\n */\nasync function testRepeatingParameter(input: any[], invocation: CustomFunctions.Invocation): Promise<string> {\n  let result = \"\";\n  const context = new Excel.RequestContext();\n  let sheet = context.workbook.worksheets.getActiveWorksheet();\n  for (let index = 0; index < input.length; index++) {\n    const element = input[index];\n    if (element === 0 && invocation.parameterAddresses[index] != undefined) {\n      let range = sheet.getRange(invocation.parameterAddresses[index]).load(\"text\");\n      await context.sync();\n      if (range.text[0][0] == \"\") {\n        result += \"[]\"; // '0' comes from the empty cell.\n      } else {\n        result += range.text[0][0]; // '0' is the real value.\n      }\n    } else {\n      result += element;\n    }\n  }\n\n  return result;\n}\n\n\n/**\n * Simulate latency and return the number in millisecond.\n * @customfunction\n * @param {number} latency Average latency in millisecond\n * @param {any} dependency Only for triggering chained calc.\n * @returns {Promise<number>}\n */\nfunction returnAfterAsyncLatency(latency: number, dependency?: any) {\n  let simulateLatency = (Math.random() * 2 - 1) * 1000 + latency;\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Math.floor(simulateLatency));\n    }, simulateLatency);\n  });\n}\n\n\n/**\n * Return latency in millisecond after sleep.\n * @customfunction\n * @param {number} latency Time to sleep in millisecond before return.\n * @param {any} dependency Only for triggering chained calc.\n * @returns {Promise<number>}\n */\nfunction returnAfterSleep(latency: number, dependency?: any) {\n  let date = new Date().getTime();\n  let curDate = null;\n  do { curDate = new Date().getTime(); }\n  while (curDate - date < latency);\n  return latency;\n}\n\n/**\n * Returns a simple entity.\n * @customfunction\n * @returns {any} A simple entity.\n */\nfunction getSimpleEntity() {\n  console.log(`Start getSimpleEntity`);\n  let randomValue = Math.floor(Math.random() * 100);\n  const entity = {\n    type: Excel.CellValueType.entity,\n    text: \"Sample Entity \" + randomValue,\n    properties: {\n      randomNumber: {\n        type: Excel.CellValueType.double,\n        basicValue: randomValue,\n      },\n    },\n  };\n\n  return entity;\n}\n\n/**\n * Returns a rich error.\n * @customfunction\n * @param {string} errorType The type of error to return.\n * @returns {any} A rich error.\n */\nfunction getRichError(errorTypeString?: string) {\n  console.log(`Start getRichError`);\n  let errorType = Excel.ErrorCellValueType.value;\n  let errorSubType = null;\n  switch(errorTypeString) {\n    case \"timeout\":\n      errorType = Excel.ErrorCellValueType.timeout;\n      errorSubType = Excel.TimeoutErrorCellValueSubType.pythonTimeoutLimitReached;\n      break;\n    case \"blocked\":\n      errorType = Excel.ErrorCellValueType.blocked;\n      errorSubType = Excel.BlockedErrorCellValueSubType.dataTypeUnsupportedApp;\n      break;\n    case \"busy\":\n      errorType = Excel.ErrorCellValueType.busy;\n      errorSubType = Excel.BusyErrorCellValueSubType.loadingImage;\n      break;\n    case \"calc\":\n      errorType = Excel.ErrorCellValueType.calc;\n      errorSubType = Excel.CalcErrorCellValueSubType.tooDeeplyNested;\n      break;\n    case \"div0\":\n      errorType = Excel.ErrorCellValueType.div0;\n      // div0 does not have subType\n      break;\n    case \"external\":\n      errorType = Excel.ErrorCellValueType.external;\n      errorSubType = Excel.ExternalErrorCellValueSubType.unknown;\n      break;\n    case \"value\":\n    default:\n      errorType = Excel.ErrorCellValueType.value;\n      errorSubType = Excel.ValueErrorCellValueSubType.coerceStringToNumberInvalid;\n      break;\n  }\n\n  let error = {};\n  if (errorSubType) {\n    error = {\n      type: Excel.CellValueType.error,\n      basicType: Excel.RangeValueType.error,\n      errorType: errorType,\n      errorSubType: errorSubType,\n    };\n  } else {\n    error = {\n      type: Excel.CellValueType.error,\n      basicType: Excel.RangeValueType.error,\n      errorType: errorType,\n    };\n  }\n\n  return error;\n}\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"TESTREPEATINGPARAMETER\", testRepeatingParameter);\nCustomFunctions.associate(\"RETURNAFTERASYNCLATENCY\", returnAfterAsyncLatency);\nCustomFunctions.associate(\"RETURNAFTERSLEEP\", returnAfterSleep);\nCustomFunctions.associate(\"GETSIMPLEENTITY\", getSimpleEntity);\nCustomFunctions.associate(\"GETRICHERROR\", getRichError);","/// Linked entity samples below\r\n\r\n// Linked entity data domain constants\r\nconst productsDomainId = \"products\";\r\nconst categoriesDomainId = \"categories\";\r\nconst suppliersDomainId = \"suppliers\";\r\n\r\n// Linked entity cell value constants\r\nconst addinDomainServiceId = 268436224;\r\nconst defaultCulture = \"en-US\";\r\n\r\n/**\r\n * Custom function which demonstrates insertion of a third-party `LinkedEntityCellValue`.\r\n * @customfunction\r\n * @param {string} productId Unique id of the product.\r\n * @return {Promise<any>} `LinkedEntityCellValue` for the requested product, if found.\r\n */\r\nasync function getProductById(productId: string): Promise<any> {\r\n    console.log(`Start getProductById: Fetching product with id ${productId} ...`);\r\n    const linkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Chai\",\r\n        id: {\r\n            entityId: productId,\r\n            domainId: productsDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        }\r\n    };\r\n\r\n    return linkedEntity;\r\n}\r\n\r\n\r\n/**\r\n * Custom function which acts as the \"service\" or the data provider for a `LinkedEntityDataDomain`, that is\r\n * called on demand by Excel to resolve/refresh `LinkedEntityCellValue`s of that `LinkedEntityDataDomain`.\r\n * @customfunction\r\n * @linkedEntityDataProvider\r\n * @param {any} linkedEntityId Unique `LinkedEntityId` of the `LinkedEntityCellValue`s which is being\r\n * requested for resolution/refresh.\r\n * @return {Promise<any>} Resolved/Updated `LinkedEntityCellValue` that was requested by the passed-in id.\r\n */\r\nasync function productLinkedEntityService(linkedEntityId: any): Promise<any> {\r\n    console.log(`Start productLinkedEntityService: Fetching linked entity with id ${linkedEntityId} ...`);\r\n    const notAvailableError = new CustomFunctions.Error(CustomFunctions.ErrorCode.notAvailable);\r\n    console.log(`Fetching linked entity with id ${linkedEntityId} ...`);\r\n\r\n    try {\r\n        const parsedLinkedEntityId: Excel.LinkedEntityId = JSON.parse(linkedEntityId);\r\n        return makeSimpleLinkedEntity(parsedLinkedEntityId.entityId);\r\n        // // Parse the linkedEntityId that was passed-in by Excel.\r\n        // const parsedLinkedEntityId: Excel.LinkedEntityId = JSON.parse(linkedEntityId);\r\n\r\n        // // Identify the domainId of the requested linkedEntityId and call the corresponding function to create\r\n        // // linked entity cell values for that linked entity data domain.\r\n        // var linkedEntityResult = null;\r\n        // switch (parsedLinkedEntityId.domainId) {\r\n        //   case productsDomainId: {\r\n        //     linkedEntityResult = makeProductLinkedEntity(parsedLinkedEntityId.entityId);\r\n        //     break;\r\n        //   }\r\n\r\n        //   case categoriesDomainId: {\r\n        //     linkedEntityResult = makeCategoryLinkedEntity(parsedLinkedEntityId.entityId);\r\n        //     break;\r\n        //   }\r\n\r\n        //   case suppliersDomainId: {\r\n        //     linkedEntityResult = makeSupplierLinkedEntity(parsedLinkedEntityId.entityId);\r\n        //     break;\r\n        //   }\r\n\r\n        //   default:\r\n        //     throw notAvailableError;\r\n        // }\r\n\r\n        // if (linkedEntityResult === null) {\r\n        //   // Throw an error to signify to Excel that resolution/refresh of the requested linkedEntityId failed.\r\n        //   throw notAvailableError;\r\n        // }\r\n\r\n        // return linkedEntityResult;\r\n    } catch (error) {\r\n        console.error(error);\r\n        throw notAvailableError;\r\n    }\r\n}\r\n\r\nfunction makeSimpleLinkedEntity(productID: string): any {\r\n    const productLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Chai\",\r\n        id: {\r\n            entityId: productID,\r\n            domainId: productsDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Product ID\": {\r\n                type: \"String\",\r\n                basicValue: productID.toString()\r\n            },\r\n            \"Product Name\": {\r\n                type: \"String\",\r\n                basicValue: \"Chai\"\r\n            },\r\n            \"Quantity Per Unit\": {\r\n                type: \"String\",\r\n                basicValue: \"10 boxes x 20 bags\"\r\n            },\r\n            // Add Unit Price as a formatted number.\r\n            \"Unit Price\": {\r\n                type: \"FormattedNumber\",\r\n                basicValue: 18,\r\n                numberFormat: \"$* #,##0.00\"\r\n            },\r\n            Discontinued: {\r\n                type: \"Boolean\",\r\n                basicValue: false\r\n            }\r\n        },\r\n        cardLayout: {\r\n            title: { property: \"Product Name\" },\r\n            sections: [\r\n                {\r\n                    layout: \"List\",\r\n                    properties: [\"Product ID\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Quantity and price\",\r\n                    collapsible: true,\r\n                    collapsed: false,\r\n                    properties: [\"Quantity Per Unit\", \"Unit Price\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Additional information\",\r\n                    collapsed: true,\r\n                    properties: [\"Discontinued\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    productLinkedEntity.properties[\"Image\"] = {\r\n        type: \"WebImage\",\r\n        address: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Masala_Chai.JPG/320px-Masala_Chai.JPG\"\r\n    };\r\n    productLinkedEntity.cardLayout.mainImage = { property: \"Image\" };\r\n    // Add a deferred nested linked entity for the product category.\r\n    productLinkedEntity.properties[\"Category\"] = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Beverages\",\r\n        id: {\r\n            entityId: \"C1\",\r\n            domainId: categoriesDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        }\r\n    };\r\n    // Add nested product category to the card layout.\r\n    productLinkedEntity.cardLayout.sections[0].properties.push(\"Category\");\r\n    // Add a deferred nested linked entity for the supplier.\r\n    productLinkedEntity.properties[\"Supplier\"] = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Exotic Liquids\",\r\n        id: {\r\n            entityId: \"S1\",\r\n            domainId: suppliersDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        }\r\n    };\r\n    // Add nested product supplier to the card layout.\r\n    productLinkedEntity.cardLayout.sections[2].properties.push(\"Supplier\");\r\n    return productLinkedEntity;\r\n}\r\n\r\n/** Helper function to create linked entity from product properties. */\r\nfunction makeProductLinkedEntity(productID: string): any {\r\n    // Search the sample JSON product data for a matching product ID.\r\n    const product = getProduct(productID);\r\n    if (product === null) {\r\n        // Return null if no matching product is found.\r\n        return null;\r\n    }\r\n\r\n    const productLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: product.productName,\r\n        id: {\r\n            entityId: product.productID,\r\n            domainId: productsDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Product ID\": {\r\n                type: \"String\",\r\n                basicValue: product.productID\r\n            },\r\n            \"Product Name\": {\r\n                type: \"String\",\r\n                basicValue: product.productName\r\n            },\r\n            \"Quantity Per Unit\": {\r\n                type: \"String\",\r\n                basicValue: product.quantityPerUnit\r\n            },\r\n            // Add Unit Price as a formatted number.\r\n            \"Unit Price\": {\r\n                type: \"FormattedNumber\",\r\n                basicValue: product.unitPrice,\r\n                numberFormat: \"$* #,##0.00\"\r\n            },\r\n            Discontinued: {\r\n                type: \"Boolean\",\r\n                basicValue: product.discontinued\r\n            }\r\n        },\r\n        cardLayout: {\r\n            title: { property: \"Product Name\" },\r\n            sections: [\r\n                {\r\n                    layout: \"List\",\r\n                    properties: [\"Product ID\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Quantity and price\",\r\n                    collapsible: true,\r\n                    collapsed: false,\r\n                    properties: [\"Quantity Per Unit\", \"Unit Price\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Additional information\",\r\n                    collapsed: true,\r\n                    properties: [\"Discontinued\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    // Add image property to the linked entity and then add it to the card layout.\r\n    if (product.productImage) {\r\n        productLinkedEntity.properties[\"Image\"] = {\r\n            type: \"WebImage\",\r\n            address: product.productImage\r\n        };\r\n        productLinkedEntity.cardLayout.mainImage = { property: \"Image\" };\r\n    }\r\n\r\n    // Add a deferred nested linked entity for the product category.\r\n    const category = getCategory(product.categoryID.toString());\r\n    if (category) {\r\n        productLinkedEntity.properties[\"Category\"] = {\r\n            type: \"LinkedEntity\",\r\n            text: category.categoryName,\r\n            id: {\r\n                entityId: category.categoryID.toString(),\r\n                domainId: categoriesDomainId,\r\n                serviceId: addinDomainServiceId,\r\n                culture: defaultCulture\r\n            }\r\n        };\r\n\r\n        // Add nested product category to the card layout.\r\n        productLinkedEntity.cardLayout.sections[0].properties.push(\"Category\");\r\n    }\r\n\r\n    // Add a deferred nested linked entity for the supplier.\r\n    const supplier = getSupplier(product.supplierID.toString());\r\n    if (supplier) {\r\n        productLinkedEntity.properties[\"Supplier\"] = {\r\n            type: \"LinkedEntity\",\r\n            text: supplier.companyName,\r\n            id: {\r\n                entityId: supplier.supplierID.toString(),\r\n                domainId: suppliersDomainId,\r\n                serviceId: addinDomainServiceId,\r\n                culture: defaultCulture\r\n            }\r\n        };\r\n\r\n        // Add nested product supplier to the card layout.\r\n        productLinkedEntity.cardLayout.sections[2].properties.push(\"Supplier\");\r\n    }\r\n\r\n    return productLinkedEntity;\r\n}\r\n\r\n/** Helper function to create linked entity from category properties. */\r\nfunction makeCategoryLinkedEntity(categoryID: string): any {\r\n    // Search the sample JSON category data for a matching category ID.\r\n    const category = getCategory(categoryID);\r\n    if (category === null) {\r\n        // Return null if no matching category is found.\r\n        return null;\r\n    }\r\n\r\n    const categoryLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: category.categoryName,\r\n        id: {\r\n            entityId: category.categoryID,\r\n            domainId: categoriesDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Category ID\": {\r\n                type: \"String\",\r\n                basicValue: category.categoryID,\r\n                propertyMetadata: {\r\n                    // Exclude the category ID property from the card view and auto complete.\r\n                    excludeFrom: {\r\n                        cardView: true,\r\n                        autoComplete: true\r\n                    }\r\n                }\r\n            },\r\n            \"Category Name\": {\r\n                type: \"String\",\r\n                basicValue: category.categoryName\r\n            },\r\n            Description: {\r\n                type: \"String\",\r\n                basicValue: category.description\r\n            }\r\n        }\r\n    };\r\n\r\n    return categoryLinkedEntity;\r\n}\r\n\r\n/** Helper function to create linked entity from supplier properties. */\r\nfunction makeSupplierLinkedEntity(supplierID: string): any {\r\n    // Search the sample JSON category data for a matching supplier ID.\r\n    const supplier = getSupplier(supplierID);\r\n    if (supplier === null) {\r\n        // Return null if no matching supplier is found.\r\n        return null;\r\n    }\r\n\r\n    const supplierLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: supplier.companyName,\r\n        id: {\r\n            entityId: supplier.supplierID,\r\n            domainId: suppliersDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Supplier ID\": {\r\n                type: \"String\",\r\n                basicValue: supplier.supplierID\r\n            },\r\n            \"Company Name\": {\r\n                type: \"String\",\r\n                basicValue: supplier.companyName\r\n            },\r\n            \"Contact Name\": {\r\n                type: \"String\",\r\n                basicValue: supplier.contactName\r\n            },\r\n            \"Contact Title\": {\r\n                type: \"String\",\r\n                basicValue: supplier.contactTitle\r\n            }\r\n        },\r\n        cardLayout: {\r\n            title: { property: \"Company Name\" },\r\n            sections: [\r\n                {\r\n                    layout: \"List\",\r\n                    properties: [\"Supplier ID\", \"Company Name\", \"Contact Name\", \"Contact Title\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    return supplierLinkedEntity;\r\n}\r\n\r\n/** Get products and product properties. */\r\nfunction getProduct(productID: string): any {\r\n    return products.find((p) => p.productID === productID);\r\n}\r\n\r\n/** Get product categories and category properties. */\r\nfunction getCategory(categoryID: string): any {\r\n    return categories.find((c) => c.categoryID === categoryID);\r\n}\r\n\r\n/** Get product suppliers and supplier properties. */\r\nfunction getSupplier(supplierID: string): any {\r\n    return suppliers.find((s) => s.supplierID === supplierID);\r\n}\r\n\r\n/** Sample JSON product data. */\r\nconst products = [\r\n    {\r\n        productID: \"P1\",\r\n        productName: \"Chai\",\r\n        supplierID: \"S1\",\r\n        categoryID: \"C1\",\r\n        quantityPerUnit: \"10 boxes x 20 bags\",\r\n        unitPrice: 18,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Masala_Chai.JPG/320px-Masala_Chai.JPG\"\r\n    },\r\n    {\r\n        productID: \"P2\",\r\n        productName: \"Chang\",\r\n        supplierID: \"S1\",\r\n        categoryID: \"C1\",\r\n        quantityPerUnit: \"24 - 12 oz bottles\",\r\n        unitPrice: 19,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P3\",\r\n        productName: \"Aniseed Syrup\",\r\n        supplierID: \"S1\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"12 - 550 ml bottles\",\r\n        unitPrice: 10,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Maltose_syrup.jpg/185px-Maltose_syrup.jpg\"\r\n    },\r\n    {\r\n        productID: \"P4\",\r\n        productName: \"Chef Anton's Cajun Seasoning\",\r\n        supplierID: \"S2\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"48 - 6 oz jars\",\r\n        unitPrice: 22,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Kruidenmengeling-spice.jpg/193px-Kruidenmengeling-spice.jpg\"\r\n    },\r\n    {\r\n        productID: \"P5\",\r\n        productName: \"Chef Anton's Gumbo Mix\",\r\n        supplierID: \"S2\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"36 boxes\",\r\n        unitPrice: 21.35,\r\n        discontinued: true,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Okra_in_a_Bowl_%28Unsplash%29.jpg/180px-Okra_in_a_Bowl_%28Unsplash%29.jpg\"\r\n    },\r\n    {\r\n        productID: \"P6\",\r\n        productName: \"Grandma's Boysenberry Spread\",\r\n        supplierID: \"S3\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"12 - 8 oz jars\",\r\n        unitPrice: 25,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/10/Making_cranberry_sauce_-_in_the_jar.jpg/90px-Making_cranberry_sauce_-_in_the_jar.jpg\"\r\n    },\r\n    {\r\n        productID: \"P7\",\r\n        productName: \"Uncle Bob's Organic Dried Pears\",\r\n        supplierID: \"S3\",\r\n        categoryID: \"C7\",\r\n        quantityPerUnit: \"12 - 1 lb pkgs.\",\r\n        unitPrice: 30,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/DriedPears.JPG/120px-DriedPears.JPG\"\r\n    },\r\n    {\r\n        productID: \"P8\",\r\n        productName: \"Northwoods Cranberry Sauce\",\r\n        supplierID: \"S3\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"12 - 12 oz jars\",\r\n        unitPrice: 40,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Making_cranberry_sauce_-_stovetop.jpg/90px-Making_cranberry_sauce_-_stovetop.jpg\"\r\n    },\r\n    {\r\n        productID: \"P9\",\r\n        productName: \"Mishi Kobe Niku\",\r\n        supplierID: \"S4\",\r\n        categoryID: \"C6\",\r\n        quantityPerUnit: \"18 - 500 g pkgs.\",\r\n        unitPrice: 97,\r\n        discontinued: true,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P10\",\r\n        productName: \"Ikura\",\r\n        supplierID: \"S4\",\r\n        categoryID: \"C8\",\r\n        quantityPerUnit: \"12 - 200 ml jars\",\r\n        unitPrice: 31,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P11\",\r\n        productName: \"Queso Cabrales\",\r\n        supplierID: \"S5\",\r\n        categoryID: \"C4\",\r\n        quantityPerUnit: \"1 kg pkg.\",\r\n        unitPrice: 21,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Tilsit_cheese.jpg/190px-Tilsit_cheese.jpg\"\r\n    },\r\n    {\r\n        productID: \"P12\",\r\n        productName: \"Queso Manchego La Pastora\",\r\n        supplierID: \"S5\",\r\n        categoryID: \"C4\",\r\n        quantityPerUnit: \"10 - 500 g pkgs.\",\r\n        unitPrice: 38,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Manchego.jpg/177px-Manchego.jpg\"\r\n    },\r\n    {\r\n        productID: \"P13\",\r\n        productName: \"Konbu\",\r\n        supplierID: \"S6\",\r\n        categoryID: \"C8\",\r\n        quantityPerUnit: \"2 kg box\",\r\n        unitPrice: 6,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P14\",\r\n        productName: \"Tofu\",\r\n        supplierID: \"S6\",\r\n        categoryID: \"C7\",\r\n        quantityPerUnit: \"40 - 100 g pkgs.\",\r\n        unitPrice: 23.25,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Korean.food-Dubu.gui-01.jpg/120px-Korean.food-Dubu.gui-01.jpg\"\r\n    },\r\n    {\r\n        productID: \"P15\",\r\n        productName: \"Genen Shouyu\",\r\n        supplierID: \"S6\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"24 - 250 ml bottles\",\r\n        unitPrice: 15.5,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P16\",\r\n        productName: \"Pavlova\",\r\n        supplierID: \"S7\",\r\n        categoryID: \"C3\",\r\n        quantityPerUnit: \"32 - 500 g boxes\",\r\n        unitPrice: 17.45,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P17\",\r\n        productName: \"Alice Mutton\",\r\n        supplierID: \"S7\",\r\n        categoryID: \"C6\",\r\n        quantityPerUnit: \"20 - 1 kg tins\",\r\n        unitPrice: 39,\r\n        discontinued: true,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P18\",\r\n        productName: \"Carnarvon Tigers\",\r\n        supplierID: \"S7\",\r\n        categoryID: \"C8\",\r\n        quantityPerUnit: \"16 kg pkg.\",\r\n        unitPrice: 62.5,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P19\",\r\n        productName: \"Teatime Chocolate Biscuits\",\r\n        supplierID: \"S8\",\r\n        categoryID: \"C3\",\r\n        quantityPerUnit: \"10 boxes x 12 pieces\",\r\n        unitPrice: 9.2,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Macau_Koi_Kei_Bakery_Almond_Biscuits_2.JPG/120px-Macau_Koi_Kei_Bakery_Almond_Biscuits_2.JPG\"\r\n    },\r\n    {\r\n        productID: \"P20\",\r\n        productName: \"Sir Rodney's Marmalade\",\r\n        supplierID: \"S8\",\r\n        categoryID: \"C3\",\r\n        quantityPerUnit: \"30 gift boxes\",\r\n        unitPrice: 81,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Homemade_marmalade%2C_England.jpg/135px-Homemade_marmalade%2C_England.jpg\"\r\n    }\r\n];\r\n\r\nconst categories = [\r\n    {\r\n        categoryID: \"C1\",\r\n        categoryName: \"Beverages\",\r\n        description: \"Soft drinks, coffees, teas, beers, and ales\"\r\n    },\r\n    {\r\n        categoryID: \"C2\",\r\n        categoryName: \"Condiments\",\r\n        description: \"Sweet and savory sauces, relishes, spreads, and seasonings\"\r\n    },\r\n    {\r\n        categoryID: \"C3\",\r\n        categoryName: \"Confections\",\r\n        description: \"Desserts, candies, and sweet breads\"\r\n    },\r\n    {\r\n        categoryID: \"C4\",\r\n        categoryName: \"Dairy Products\",\r\n        description: \"Cheeses\"\r\n    },\r\n    {\r\n        categoryID: \"C5\",\r\n        categoryName: \"Grains/Cereals\",\r\n        description: \"Breads, crackers, pasta, and cereal\"\r\n    },\r\n    {\r\n        categoryID: \"C6\",\r\n        categoryName: \"Meat/Poultry\",\r\n        description: \"Prepared meats\"\r\n    },\r\n    {\r\n        categoryID: \"C7\",\r\n        categoryName: \"Produce\",\r\n        description: \"Dried fruit and bean curd\"\r\n    },\r\n    {\r\n        categoryID: \"C8\",\r\n        categoryName: \"Seafood\",\r\n        description: \"Seaweed and fish\"\r\n    }\r\n];\r\n\r\nconst suppliers = [\r\n    {\r\n        supplierID: \"S1\",\r\n        companyName: \"Exotic Liquids\",\r\n        contactName: \"Charlotte Cooper\",\r\n        contactTitle: \"Purchasing Manager\"\r\n    },\r\n    {\r\n        supplierID: \"S2\",\r\n        companyName: \"New Orleans Cajun Delights\",\r\n        contactName: \"Shelley Burke\",\r\n        contactTitle: \"Order Administrator\"\r\n    },\r\n    {\r\n        supplierID: \"S3\",\r\n        companyName: \"Grandma Kelly's Homestead\",\r\n        contactName: \"Regina Murphy\",\r\n        contactTitle: \"Sales Representative\"\r\n    },\r\n    {\r\n        supplierID: \"S4\",\r\n        companyName: \"Tokyo Traders\",\r\n        contactName: \"Yoshi Nagase\",\r\n        contactTitle: \"Marketing Manager\",\r\n        address: \"9-8 Sekimai Musashino-shi\"\r\n    },\r\n    {\r\n        supplierID: \"S5\",\r\n        companyName: \"Cooperativa de Quesos 'Las Cabras'\",\r\n        contactName: \"Antonio del Valle Saavedra\",\r\n        contactTitle: \"Export Administrator\"\r\n    },\r\n    {\r\n        supplierID: \"S6\",\r\n        companyName: \"Mayumi's\",\r\n        contactName: \"Mayumi Ohno\",\r\n        contactTitle: \"Marketing Representative\"\r\n    },\r\n    {\r\n        supplierID: \"S7\",\r\n        companyName: \"Pavlova, Ltd.\",\r\n        contactName: \"Ian Devling\",\r\n        contactTitle: \"Marketing Manager\"\r\n    },\r\n    {\r\n        supplierID: \"S8\",\r\n        companyName: \"Specialty Biscuits, Ltd.\",\r\n        contactName: \"Peter Wilson\",\r\n        contactTitle: \"Sales Representative\"\r\n    }\r\n];\r\n\r\n\r\n/// Linked entity samples above\nCustomFunctions.associate(\"GETPRODUCTBYID\", getProductById);\nCustomFunctions.associate(\"PRODUCTLINKEDENTITYSERVICE\", productLinkedEntityService);"],"names":["CustomFunctions","associate","first","second","message","console","log","async","input","invocation","result","context","Excel","RequestContext","sheet","workbook","worksheets","getActiveWorksheet","index","length","element","undefined","parameterAddresses","range","getRange","load","sync","text","latency","dependency","simulateLatency","Math","random","Promise","resolve","setTimeout","floor","date","Date","getTime","curDate","randomValue","type","CellValueType","entity","properties","randomNumber","double","basicValue","errorTypeString","errorType","ErrorCellValueType","value","errorSubType","timeout","TimeoutErrorCellValueSubType","pythonTimeoutLimitReached","blocked","BlockedErrorCellValueSubType","dataTypeUnsupportedApp","busy","BusyErrorCellValueSubType","loadingImage","calc","CalcErrorCellValueSubType","tooDeeplyNested","div0","external","ExternalErrorCellValueSubType","unknown","ValueErrorCellValueSubType","coerceStringToNumberInvalid","error","basicType","RangeValueType","productsDomainId","addinDomainServiceId","defaultCulture","productId","id","entityId","domainId","serviceId","culture","linkedEntityId","notAvailableError","Error","ErrorCode","notAvailable","productID","productLinkedEntity","toString","numberFormat","Discontinued","cardLayout","title","property","sections","layout","collapsible","collapsed","address","mainImage","push","makeSimpleLinkedEntity","JSON","parse"],"sourceRoot":""}