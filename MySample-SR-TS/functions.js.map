{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions/./src/functions/functions.ts","webpack://excel-custom-functions/./src/functions/sampleLinkedEntity.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/// <reference path=\"../office-experiment52.d.ts\" />\n\nimport path from \"path\";\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Echo the input. If input is null, return \"null\".\n * @customfunction\n * @param {any} input\n * @returns {any} The input value.\n */\nexport function echo(input: any): any {\n  if (input == null) {\n    return \"null\";\n  }\n  return input;\n}\n\n/**\n * Creates a formatted number.\n * @customfunction\n * @param {number} input\n * @param {string} format\n * @returns {any} The formatted number.\n */\nfunction createFormattedNumber(value, format) {\n  return {\n    type: \"FormattedNumber\",\n    basicValue: value,\n    numberFormat: format\n  }\n}\n\n/**\n * Creates a PwM for number.\n * @customfunction\n * @param {number} value\n * @returns {any}\n */\nfunction createPWMForNumber(value: number) {\n  return {\n    type: Excel.CellValueType.double,\n    basicValue: value,\n    basicType: Excel.RangeValueType.double,\n    properties:\n    {\n      Name:\n      {\n        type: Excel.CellValueType.string,\n        basicValue: \"Metadata for the number\"\n      }\n    },\n    layouts:\n    {\n      compact:\n      {\n        icon: Excel.EntityCompactLayoutIcons.airplane,\n      }\n    }\n  }\n}\n\n/**\n * Returns a result of input + 1 for type 'any'.\n * @customfunction\n * @param input\n * @returns\n */\nfunction plusOneForAny(input: any): any {\n  if (typeof input === \"number\") {\n    return input + 1;\n  } else if (typeof input === \"object\") {\n    if (input.type === Excel.CellValueType.double) {\n      input.basicValue = input.basicValue + 1;\n    } else if (input.type === Excel.CellValueType.formattedNumber) {\n      input.basicValue = input.basicValue + 1;\n    }\n    return input;\n  }\n\n  return input;\n}\n\n/**\n * Returns a result of input + 1 for number.\n * @customfunction\n * @param {number} input\n * @returns {number}\n */\nfunction plusOneForNumber(input: number): number {\n  let result = input + 1;\n  return result;\n}\n\n/**\n * [NOTE] No customfunction tag as the new types will lead to error.\n * Returns a result of input + 1 for Excel.DoubleCellValue.\n * @param {Excel.DoubleCellValue} input\n * @returns {Excel.DoubleCellValue}\n */\nfunction plusOneForDoubleCellValue(input: Excel.DoubleCellValue): Excel.DoubleCellValue {\n  input.basicValue = input.basicValue + 1;\n  return input;\n}\n\n/**\n * [NOTE] No customfunction tag as the new types will lead to error.\n * Returns a result of input + 1 for Excel.FormattedNumberCellValue.\n * @param {Excel.FormattedNumberCellValue} input\n * @returns {Excel.FormattedNumberCellValue}\n */\nfunction plusOneForFormattedNumberCellValue(input: Excel.FormattedNumberCellValue): Excel.FormattedNumberCellValue {\n  input.basicValue = input.basicValue + 1;\n  return input;\n}\n\n/**\n * Streaming function that returns an entity every interval seconds.\n * @customfunction\n * @param {any} dependency\n * @param {number} interval\n * @param {CustomFunctions.StreamingInvocation<any>} invocation\n */\nfunction testStreaming(dependency: any, interval: number, invocation: CustomFunctions.StreamingInvocation<any>): void {\n  let result = 0;\n  let resEntity = {\n    type: \"Entity\",\n    text: \"Entity \" + result,\n    properties: {\n      propNumber: {\n        type: \"Double\",\n        basicValue: 123,\n      },\n    }\n  };\n\n  const timer = setInterval(() => {\n    result += 1;\n    resEntity.text = \"Entity \" + result;\n    invocation.setResult(resEntity);\n  }, interval * 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * @customfunction\n * @param {any[]} input\n * @param {CustomFunctions.Invocation} invocation\n * @returns {Promise<string>} Concate the input array.\n * @requiresParameterAddresses\n */\nasync function testRepeatingParameter(input: any[], invocation: CustomFunctions.Invocation): Promise<string> {\n  let result = \"\";\n  const context = new Excel.RequestContext();\n  let sheet = context.workbook.worksheets.getActiveWorksheet();\n  for (let index = 0; index < input.length; index++) {\n    const element = input[index];\n    if (element === 0 && invocation.parameterAddresses[index] != undefined) {\n      let range = sheet.getRange(invocation.parameterAddresses[index]).load(\"text\");\n      await context.sync();\n      if (range.text[0][0] == \"\") {\n        result += \"[]\"; // '0' comes from the empty cell.\n      } else {\n        result += range.text[0][0]; // '0' is the real value.\n      }\n    } else {\n      result += element;\n    }\n  }\n\n  return result;\n}\n\n/**\n * This function will call the write API to write \"Hello\" to A1.\n * @customfunction\n * @returns {string} \n */\nasync function testCallWriteAPI() {\n  Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let range = sheet.getRange(\"A1\");\n    range.values = [[\"Hello\"]];\n    await context.sync();\n  });\n\n  return \"Write API called\";\n}\n\n\n/**\n * Simulate latency and return the number in millisecond.\n * @customfunction\n * @param {number} latency Average latency in millisecond\n * @param {any} dependency Only for triggering chained calc.\n * @returns {Promise<number>}\n */\nfunction returnAfterAsyncLatency(latency: number, dependency?: any) {\n  let simulateLatency = (Math.random() * 2 - 1) * 1000 + latency;\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Math.floor(simulateLatency));\n    }, simulateLatency);\n  });\n}\n\n\n/**\n * Return latency in millisecond after sleep.\n * @customfunction\n * @param {number} latency Time to sleep in millisecond before return.\n * @param {any} dependency Only for triggering chained calc.\n * @returns {Promise<number>}\n */\nfunction returnAfterSleep(latency: number, dependency?: any) {\n  let date = new Date().getTime();\n  let curDate = null;\n  do { curDate = new Date().getTime(); }\n  while (curDate - date < latency);\n  return latency;\n}\n\n/**\n * Returns a simple entity.\n * @customfunction\n * @returns {any} A simple entity.\n */\nfunction getSimpleEntity() {\n  console.log(`Start getSimpleEntity`);\n  let randomValue = Math.floor(Math.random() * 100);\n  const entity = {\n    type: Excel.CellValueType.entity,\n    text: \"Random Entity \" + randomValue,\n    properties: {\n      randomNumber: {\n        type: Excel.CellValueType.double,\n        basicValue: randomValue,\n      },\n    },\n  };\n\n  return entity;\n}\n\n/**\n * Returns a simple entity.\n * @customfunction\n * @param {number} latency Latency in millisecond.\n * @param {any} dependency Only for triggering chained calc.\n * @returns {any} A simple entity.\n */\nfunction getRandomEntityAfterAsyncLatentcy(latency?: number, dependency?: any) {\n  console.log(`Start getSimpleEntityAfterAsyncLatentcy`);\n  let randomValue = Math.floor(Math.random() * 100);\n  const entity = {\n    type: Excel.CellValueType.entity,\n    text: \"Random Entity \" + randomValue,\n    properties: {\n      randomNumber: {\n        type: Excel.CellValueType.double,\n        basicValue: randomValue,\n      },\n    },\n  };\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(entity);\n    }, latency);\n  });\n}\n\n/**\n * Returns a rich error. Error type: https://learn.microsoft.com/en-us/office/dev/add-ins/excel/excel-data-types-concepts#improved-error-support\n * @customfunction\n * @param {string} errorType The type of error to return.\n * @returns {any} A rich error.\n */\nfunction getRichError(errorTypeString?: string) {\n  console.log(`Start getRichError`);\n  let errorType = Excel.ErrorCellValueType.value;\n  let errorSubType = null;\n  switch(errorTypeString.toLowerCase()) {\n    case \"blocked\":\n      errorType = Excel.ErrorCellValueType.blocked;\n      errorSubType = Excel.BlockedErrorCellValueSubType.dataTypeUnsupportedApp;\n      break;\n\n    case \"busy\":\n      errorType = Excel.ErrorCellValueType.busy;\n      errorSubType = Excel.BusyErrorCellValueSubType.loadingImage;\n      break;\n\n    case \"calc\":\n      errorType = Excel.ErrorCellValueType.calc;\n      errorSubType = Excel.CalcErrorCellValueSubType.tooDeeplyNested;\n      break;\n\n    case \"connect\":\n      errorType = Excel.ErrorCellValueType.connect;\n      errorSubType = Excel.ConnectErrorCellValueSubType.externalLinksAccessFailed;\n      break;\n\n    case \"div0\":\n      errorType = Excel.ErrorCellValueType.div0;\n      // div0 does not have subType\n      break;\n\n    case \"external\": // Not in the documentation\n      errorType = Excel.ErrorCellValueType.external;\n      errorSubType = Excel.ExternalErrorCellValueSubType.unknown;\n      break;\n\n    case \"field\":\n      errorType = Excel.ErrorCellValueType.field;\n      errorSubType = Excel.FieldErrorCellValueSubType.webImageMissingFilePart;\n      break;\n\n    case \"gettingdata\":\n      errorType = Excel.ErrorCellValueType.gettingData;\n      break;\n\n    case \"notavailable\":\n      errorType = Excel.ErrorCellValueType.notAvailable;\n      break;\n\n    case \"name\":\n      errorType = Excel.ErrorCellValueType.name;\n      // \"#NAME!\" does not have subType\n      break;\n\n    case \"null\":\n      errorType = Excel.ErrorCellValueType.null;\n      // null does not have subType\n      break;\n\n    case \"num\":\n      errorType = Excel.ErrorCellValueType.num;\n      errorSubType = Excel.NumErrorCellValueSubType.arrayTooLarge;\n      break;\n\n    case \"ref\":\n      errorType = Excel.ErrorCellValueType.ref;\n      errorSubType = Excel.RefErrorCellValueSubType.externalLinksCalculatedRef;\n      break;\n\n    case \"spill\":\n      errorType = Excel.ErrorCellValueType.spill;\n      errorSubType = Excel.SpillErrorCellValueSubType.collision;\n      break;\n\n    case \"timeout\": // Not in the documentation\n      errorType = Excel.ErrorCellValueType.timeout;\n      errorSubType = Excel.TimeoutErrorCellValueSubType.pythonTimeoutLimitReached;\n      break;\n\n    case \"value\":\n      errorType = Excel.ErrorCellValueType.value;\n      errorSubType = Excel.ValueErrorCellValueSubType.coerceStringToNumberInvalid;\n      break;\n\n    default:\n      errorType = Excel.ErrorCellValueType.name;\n      // \"#NAME!\" does not have subType\n      break;\n  }\n\n  let error = {};\n  if (errorSubType) {\n    error = {\n      type: Excel.CellValueType.error,\n      basicType: Excel.RangeValueType.error,\n      errorType: errorType,\n      errorSubType: errorSubType,\n    };\n  } else {\n    error = {\n      type: Excel.CellValueType.error,\n      basicType: Excel.RangeValueType.error,\n      errorType: errorType,\n    };\n  }\n\n  return error;\n}\n\n/**\n * @customfunction\n * @param errorTypeString Error type\n * @param noMessage Whether to include message\n * @returns A custom function error.\n */\nfunction getCFError(errorTypeString?: string, noMessage?: boolean) {\n  console.log(`Start getCFError`);\n  let errorType = CustomFunctions.ErrorCode.notAvailable;\n  switch(errorTypeString.toLowerCase()) {\n    case \"divisionbyzero\":\n      errorType = CustomFunctions.ErrorCode.divisionByZero;\n      break;\n    case \"invalidvalue\":\n      errorType = CustomFunctions.ErrorCode.invalidValue;\n      break;\n    case \"notavailable\":\n      errorType = CustomFunctions.ErrorCode.notAvailable;\n      break;\n    default:\n      // default NA error\n      break;\n  }\n\n  if (noMessage) {\n    return new CustomFunctions.Error(errorType);\n  } else {\n    let message = \"Customized CF error message\";\n    return new CustomFunctions.Error(errorType, message);\n  }\n}\n\n/**\n * @customfunction\n * @param {any} input Input value\n * @returns {string} Error message\n */\nfunction getCFErrorMessage(input: any) {\n  if (input.type == CustomFunctions.Error) {\n    return input.message;\n  }\n  else if (input.type == Excel.CellValueType.error) {\n    return \"Not CF error but Excel error\";\n  }\n  else {\n    return \"Not a CF error\";\n  }\n}\n\nexport function getRandom0to99() {\n  return Math.floor(Math.random() * 100);\n}\n\n/**\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<any>} invocation \n */\nfunction testFormattedNumberStreaming(invocation: CustomFunctions.StreamingInvocation<any>): void {\n  let format = \"0.0\";\n  let value = 0;\n  const result = {\n    basicValue: getRandom0to99(),\n    numberFormat: `${format}`,\n    type: Excel.CellValueType.formattedNumber,\n  };\n  invocation.setResult(result);\n\n  const timeoutId = setInterval(async () => {\n    value++;\n    const now = {\n      basicValue: getRandom0to99(),\n      numberFormat: `${format}`,\n      type: Excel.CellValueType.formattedNumber,\n    };\n    invocation.setResult(now);\n  }, 2000);\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"ECHO\", echo);\nCustomFunctions.associate(\"CREATEFORMATTEDNUMBER\", createFormattedNumber);\nCustomFunctions.associate(\"CREATEPWMFORNUMBER\", createPWMForNumber);\nCustomFunctions.associate(\"PLUSONEFORANY\", plusOneForAny);\nCustomFunctions.associate(\"PLUSONEFORNUMBER\", plusOneForNumber);\nCustomFunctions.associate(\"TESTSTREAMING\", testStreaming);\nCustomFunctions.associate(\"TESTREPEATINGPARAMETER\", testRepeatingParameter);\nCustomFunctions.associate(\"TESTCALLWRITEAPI\", testCallWriteAPI);\nCustomFunctions.associate(\"RETURNAFTERASYNCLATENCY\", returnAfterAsyncLatency);\nCustomFunctions.associate(\"RETURNAFTERSLEEP\", returnAfterSleep);\nCustomFunctions.associate(\"GETSIMPLEENTITY\", getSimpleEntity);\nCustomFunctions.associate(\"GETRANDOMENTITYAFTERASYNCLATENTCY\", getRandomEntityAfterAsyncLatentcy);\nCustomFunctions.associate(\"GETRICHERROR\", getRichError);\nCustomFunctions.associate(\"GETCFERROR\", getCFError);\nCustomFunctions.associate(\"GETCFERRORMESSAGE\", getCFErrorMessage);\nCustomFunctions.associate(\"TESTFORMATTEDNUMBERSTREAMING\", testFormattedNumberStreaming);","/// Linked entity samples below\r\n\r\n// Linked entity data domain constants\r\nconst productsDomainId = \"products\";\r\nconst categoriesDomainId = \"categories\";\r\nconst suppliersDomainId = \"suppliers\";\r\n\r\n// Linked entity cell value constants\r\nconst addinDomainServiceId = 268436224;\r\nconst defaultCulture = \"en-US\";\r\n\r\n/**\r\n * Get a simple linked entity with a random ID.\r\n * @customfunction\r\n * @return {Promise<any>} `LinkedEntityCellValue` for the requested product, if found.\r\n */\r\nasync function getRandomLinkedEntity(): Promise<any> {\r\n    console.log(`Start getRandomLinkedEntity ...`);\r\n    let randomValue = Math.floor(Math.random() * 100);\r\n    const linkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Linked Entity \" + randomValue,\r\n        id: {\r\n            entityId: randomValue.toString(),\r\n            domainId: productsDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        }\r\n    };\r\n\r\n    return linkedEntity;\r\n}\r\n\r\n/**\r\n * Get a linked entity for a product by its ID.\r\n * @customfunction\r\n * @param {string} productId Unique id of the product.\r\n * @return {Promise<any>} `LinkedEntityCellValue` for the requested product, if found.\r\n */\r\nasync function getLinkedEntityById(productId: string): Promise<any> {\r\n    console.log(`Start getProductById: Fetching product with id ${productId} ...`);\r\n    const linkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Chai\",\r\n        id: {\r\n            entityId: productId,\r\n            domainId: productsDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        }\r\n    };\r\n\r\n    return linkedEntity;\r\n}\r\n\r\n\r\n/**\r\n * Custom function which acts as the \"service\" or the data provider for a `LinkedEntityDataDomain`, that is\r\n * called on demand by Excel to resolve/refresh `LinkedEntityCellValue`s of that `LinkedEntityDataDomain`.\r\n * @customfunction\r\n * @linkedEntityDataProvider\r\n * @param {any} linkedEntityId Unique `LinkedEntityId` of the `LinkedEntityCellValue`s which is being\r\n * requested for resolution/refresh.\r\n * @return {Promise<any>} Resolved/Updated `LinkedEntityCellValue` that was requested by the passed-in id.\r\n */\r\nasync function productLinkedEntityService(linkedEntityId: any): Promise<any> {\r\n    console.log(`Start productLinkedEntityService: Fetching linked entity with id ${linkedEntityId} ...`);\r\n    const notAvailableError = new CustomFunctions.Error(CustomFunctions.ErrorCode.notAvailable);\r\n    console.log(`Fetching linked entity with id ${linkedEntityId} ...`);\r\n\r\n    try {\r\n        const parsedLinkedEntityId: Excel.LinkedEntityId = JSON.parse(linkedEntityId);\r\n        return makeSimpleLinkedEntity(parsedLinkedEntityId.entityId);\r\n    } catch (error) {\r\n        console.error(error);\r\n        throw notAvailableError;\r\n    }\r\n}\r\n\r\nfunction makeSimpleLinkedEntity(productID: string): any {\r\n    const productLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Linked Entity \" + productID,\r\n        id: {\r\n            entityId: productID,\r\n            domainId: productsDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Product ID\": {\r\n                type: \"String\",\r\n                basicValue: productID.toString()\r\n            },\r\n            \"Product Name\": {\r\n                type: \"String\",\r\n                basicValue: \"Chai\"\r\n            },\r\n            \"Quantity Per Unit\": {\r\n                type: \"String\",\r\n                basicValue: \"10 boxes x 20 bags\"\r\n            },\r\n            // Add Unit Price as a formatted number.\r\n            \"Unit Price\": {\r\n                type: \"FormattedNumber\",\r\n                basicValue: 18,\r\n                numberFormat: \"$* #,##0.00\"\r\n            },\r\n            Discontinued: {\r\n                type: \"Boolean\",\r\n                basicValue: false\r\n            }\r\n        },\r\n        cardLayout: {\r\n            title: { property: \"Product Name\" },\r\n            sections: [\r\n                {\r\n                    layout: \"List\",\r\n                    properties: [\"Product ID\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Quantity and price\",\r\n                    collapsible: true,\r\n                    collapsed: false,\r\n                    properties: [\"Quantity Per Unit\", \"Unit Price\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Additional information\",\r\n                    collapsed: true,\r\n                    properties: [\"Discontinued\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n    productLinkedEntity.properties[\"Image\"] = {\r\n        type: \"WebImage\",\r\n        address: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Masala_Chai.JPG/320px-Masala_Chai.JPG\"\r\n    };\r\n    productLinkedEntity.cardLayout.mainImage = { property: \"Image\" };\r\n    // Add a deferred nested linked entity for the product category.\r\n    productLinkedEntity.properties[\"Category\"] = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Beverages\",\r\n        id: {\r\n            entityId: \"C1\",\r\n            domainId: categoriesDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        }\r\n    };\r\n    // Add nested product category to the card layout.\r\n    productLinkedEntity.cardLayout.sections[0].properties.push(\"Category\");\r\n    // Add a deferred nested linked entity for the supplier.\r\n    productLinkedEntity.properties[\"Supplier\"] = {\r\n        type: \"LinkedEntity\",\r\n        text: \"Exotic Liquids\",\r\n        id: {\r\n            entityId: \"S1\",\r\n            domainId: suppliersDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        }\r\n    };\r\n    // Add nested product supplier to the card layout.\r\n    productLinkedEntity.cardLayout.sections[2].properties.push(\"Supplier\");\r\n    return productLinkedEntity;\r\n}\r\n\r\n/** Helper function to create linked entity from product properties. */\r\nfunction makeProductLinkedEntity(productID: string): any {\r\n    // Search the sample JSON product data for a matching product ID.\r\n    const product = getProduct(productID);\r\n    if (product === null) {\r\n        // Return null if no matching product is found.\r\n        return null;\r\n    }\r\n\r\n    const productLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: product.productName,\r\n        id: {\r\n            entityId: product.productID,\r\n            domainId: productsDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Product ID\": {\r\n                type: \"String\",\r\n                basicValue: product.productID\r\n            },\r\n            \"Product Name\": {\r\n                type: \"String\",\r\n                basicValue: product.productName\r\n            },\r\n            \"Quantity Per Unit\": {\r\n                type: \"String\",\r\n                basicValue: product.quantityPerUnit\r\n            },\r\n            // Add Unit Price as a formatted number.\r\n            \"Unit Price\": {\r\n                type: \"FormattedNumber\",\r\n                basicValue: product.unitPrice,\r\n                numberFormat: \"$* #,##0.00\"\r\n            },\r\n            Discontinued: {\r\n                type: \"Boolean\",\r\n                basicValue: product.discontinued\r\n            }\r\n        },\r\n        cardLayout: {\r\n            title: { property: \"Product Name\" },\r\n            sections: [\r\n                {\r\n                    layout: \"List\",\r\n                    properties: [\"Product ID\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Quantity and price\",\r\n                    collapsible: true,\r\n                    collapsed: false,\r\n                    properties: [\"Quantity Per Unit\", \"Unit Price\"]\r\n                },\r\n                {\r\n                    layout: \"List\",\r\n                    title: \"Additional information\",\r\n                    collapsed: true,\r\n                    properties: [\"Discontinued\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    // Add image property to the linked entity and then add it to the card layout.\r\n    if (product.productImage) {\r\n        productLinkedEntity.properties[\"Image\"] = {\r\n            type: \"WebImage\",\r\n            address: product.productImage\r\n        };\r\n        productLinkedEntity.cardLayout.mainImage = { property: \"Image\" };\r\n    }\r\n\r\n    // Add a deferred nested linked entity for the product category.\r\n    const category = getCategory(product.categoryID.toString());\r\n    if (category) {\r\n        productLinkedEntity.properties[\"Category\"] = {\r\n            type: \"LinkedEntity\",\r\n            text: category.categoryName,\r\n            id: {\r\n                entityId: category.categoryID.toString(),\r\n                domainId: categoriesDomainId,\r\n                serviceId: addinDomainServiceId,\r\n                culture: defaultCulture\r\n            }\r\n        };\r\n\r\n        // Add nested product category to the card layout.\r\n        productLinkedEntity.cardLayout.sections[0].properties.push(\"Category\");\r\n    }\r\n\r\n    // Add a deferred nested linked entity for the supplier.\r\n    const supplier = getSupplier(product.supplierID.toString());\r\n    if (supplier) {\r\n        productLinkedEntity.properties[\"Supplier\"] = {\r\n            type: \"LinkedEntity\",\r\n            text: supplier.companyName,\r\n            id: {\r\n                entityId: supplier.supplierID.toString(),\r\n                domainId: suppliersDomainId,\r\n                serviceId: addinDomainServiceId,\r\n                culture: defaultCulture\r\n            }\r\n        };\r\n\r\n        // Add nested product supplier to the card layout.\r\n        productLinkedEntity.cardLayout.sections[2].properties.push(\"Supplier\");\r\n    }\r\n\r\n    return productLinkedEntity;\r\n}\r\n\r\n/** Helper function to create linked entity from category properties. */\r\nfunction makeCategoryLinkedEntity(categoryID: string): any {\r\n    // Search the sample JSON category data for a matching category ID.\r\n    const category = getCategory(categoryID);\r\n    if (category === null) {\r\n        // Return null if no matching category is found.\r\n        return null;\r\n    }\r\n\r\n    const categoryLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: category.categoryName,\r\n        id: {\r\n            entityId: category.categoryID,\r\n            domainId: categoriesDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Category ID\": {\r\n                type: \"String\",\r\n                basicValue: category.categoryID,\r\n                propertyMetadata: {\r\n                    // Exclude the category ID property from the card view and auto complete.\r\n                    excludeFrom: {\r\n                        cardView: true,\r\n                        autoComplete: true\r\n                    }\r\n                }\r\n            },\r\n            \"Category Name\": {\r\n                type: \"String\",\r\n                basicValue: category.categoryName\r\n            },\r\n            Description: {\r\n                type: \"String\",\r\n                basicValue: category.description\r\n            }\r\n        }\r\n    };\r\n\r\n    return categoryLinkedEntity;\r\n}\r\n\r\n/** Helper function to create linked entity from supplier properties. */\r\nfunction makeSupplierLinkedEntity(supplierID: string): any {\r\n    // Search the sample JSON category data for a matching supplier ID.\r\n    const supplier = getSupplier(supplierID);\r\n    if (supplier === null) {\r\n        // Return null if no matching supplier is found.\r\n        return null;\r\n    }\r\n\r\n    const supplierLinkedEntity: Excel.LinkedEntityCellValue = {\r\n        type: \"LinkedEntity\",\r\n        text: supplier.companyName,\r\n        id: {\r\n            entityId: supplier.supplierID,\r\n            domainId: suppliersDomainId,\r\n            serviceId: addinDomainServiceId,\r\n            culture: defaultCulture\r\n        },\r\n        properties: {\r\n            \"Supplier ID\": {\r\n                type: \"String\",\r\n                basicValue: supplier.supplierID\r\n            },\r\n            \"Company Name\": {\r\n                type: \"String\",\r\n                basicValue: supplier.companyName\r\n            },\r\n            \"Contact Name\": {\r\n                type: \"String\",\r\n                basicValue: supplier.contactName\r\n            },\r\n            \"Contact Title\": {\r\n                type: \"String\",\r\n                basicValue: supplier.contactTitle\r\n            }\r\n        },\r\n        cardLayout: {\r\n            title: { property: \"Company Name\" },\r\n            sections: [\r\n                {\r\n                    layout: \"List\",\r\n                    properties: [\"Supplier ID\", \"Company Name\", \"Contact Name\", \"Contact Title\"]\r\n                }\r\n            ]\r\n        }\r\n    };\r\n\r\n    return supplierLinkedEntity;\r\n}\r\n\r\n/** Get products and product properties. */\r\nfunction getProduct(productID: string): any {\r\n    return products.find((p) => p.productID === productID);\r\n}\r\n\r\n/** Get product categories and category properties. */\r\nfunction getCategory(categoryID: string): any {\r\n    return categories.find((c) => c.categoryID === categoryID);\r\n}\r\n\r\n/** Get product suppliers and supplier properties. */\r\nfunction getSupplier(supplierID: string): any {\r\n    return suppliers.find((s) => s.supplierID === supplierID);\r\n}\r\n\r\n/** Sample JSON product data. */\r\nconst products = [\r\n    {\r\n        productID: \"P1\",\r\n        productName: \"Chai\",\r\n        supplierID: \"S1\",\r\n        categoryID: \"C1\",\r\n        quantityPerUnit: \"10 boxes x 20 bags\",\r\n        unitPrice: 18,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Masala_Chai.JPG/320px-Masala_Chai.JPG\"\r\n    },\r\n    {\r\n        productID: \"P2\",\r\n        productName: \"Chang\",\r\n        supplierID: \"S1\",\r\n        categoryID: \"C1\",\r\n        quantityPerUnit: \"24 - 12 oz bottles\",\r\n        unitPrice: 19,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P3\",\r\n        productName: \"Aniseed Syrup\",\r\n        supplierID: \"S1\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"12 - 550 ml bottles\",\r\n        unitPrice: 10,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Maltose_syrup.jpg/185px-Maltose_syrup.jpg\"\r\n    },\r\n    {\r\n        productID: \"P4\",\r\n        productName: \"Chef Anton's Cajun Seasoning\",\r\n        supplierID: \"S2\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"48 - 6 oz jars\",\r\n        unitPrice: 22,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Kruidenmengeling-spice.jpg/193px-Kruidenmengeling-spice.jpg\"\r\n    },\r\n    {\r\n        productID: \"P5\",\r\n        productName: \"Chef Anton's Gumbo Mix\",\r\n        supplierID: \"S2\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"36 boxes\",\r\n        unitPrice: 21.35,\r\n        discontinued: true,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Okra_in_a_Bowl_%28Unsplash%29.jpg/180px-Okra_in_a_Bowl_%28Unsplash%29.jpg\"\r\n    },\r\n    {\r\n        productID: \"P6\",\r\n        productName: \"Grandma's Boysenberry Spread\",\r\n        supplierID: \"S3\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"12 - 8 oz jars\",\r\n        unitPrice: 25,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/10/Making_cranberry_sauce_-_in_the_jar.jpg/90px-Making_cranberry_sauce_-_in_the_jar.jpg\"\r\n    },\r\n    {\r\n        productID: \"P7\",\r\n        productName: \"Uncle Bob's Organic Dried Pears\",\r\n        supplierID: \"S3\",\r\n        categoryID: \"C7\",\r\n        quantityPerUnit: \"12 - 1 lb pkgs.\",\r\n        unitPrice: 30,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/DriedPears.JPG/120px-DriedPears.JPG\"\r\n    },\r\n    {\r\n        productID: \"P8\",\r\n        productName: \"Northwoods Cranberry Sauce\",\r\n        supplierID: \"S3\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"12 - 12 oz jars\",\r\n        unitPrice: 40,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Making_cranberry_sauce_-_stovetop.jpg/90px-Making_cranberry_sauce_-_stovetop.jpg\"\r\n    },\r\n    {\r\n        productID: \"P9\",\r\n        productName: \"Mishi Kobe Niku\",\r\n        supplierID: \"S4\",\r\n        categoryID: \"C6\",\r\n        quantityPerUnit: \"18 - 500 g pkgs.\",\r\n        unitPrice: 97,\r\n        discontinued: true,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P10\",\r\n        productName: \"Ikura\",\r\n        supplierID: \"S4\",\r\n        categoryID: \"C8\",\r\n        quantityPerUnit: \"12 - 200 ml jars\",\r\n        unitPrice: 31,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P11\",\r\n        productName: \"Queso Cabrales\",\r\n        supplierID: \"S5\",\r\n        categoryID: \"C4\",\r\n        quantityPerUnit: \"1 kg pkg.\",\r\n        unitPrice: 21,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Tilsit_cheese.jpg/190px-Tilsit_cheese.jpg\"\r\n    },\r\n    {\r\n        productID: \"P12\",\r\n        productName: \"Queso Manchego La Pastora\",\r\n        supplierID: \"S5\",\r\n        categoryID: \"C4\",\r\n        quantityPerUnit: \"10 - 500 g pkgs.\",\r\n        unitPrice: 38,\r\n        discontinued: false,\r\n        productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Manchego.jpg/177px-Manchego.jpg\"\r\n    },\r\n    {\r\n        productID: \"P13\",\r\n        productName: \"Konbu\",\r\n        supplierID: \"S6\",\r\n        categoryID: \"C8\",\r\n        quantityPerUnit: \"2 kg box\",\r\n        unitPrice: 6,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P14\",\r\n        productName: \"Tofu\",\r\n        supplierID: \"S6\",\r\n        categoryID: \"C7\",\r\n        quantityPerUnit: \"40 - 100 g pkgs.\",\r\n        unitPrice: 23.25,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Korean.food-Dubu.gui-01.jpg/120px-Korean.food-Dubu.gui-01.jpg\"\r\n    },\r\n    {\r\n        productID: \"P15\",\r\n        productName: \"Genen Shouyu\",\r\n        supplierID: \"S6\",\r\n        categoryID: \"C2\",\r\n        quantityPerUnit: \"24 - 250 ml bottles\",\r\n        unitPrice: 15.5,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P16\",\r\n        productName: \"Pavlova\",\r\n        supplierID: \"S7\",\r\n        categoryID: \"C3\",\r\n        quantityPerUnit: \"32 - 500 g boxes\",\r\n        unitPrice: 17.45,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P17\",\r\n        productName: \"Alice Mutton\",\r\n        supplierID: \"S7\",\r\n        categoryID: \"C6\",\r\n        quantityPerUnit: \"20 - 1 kg tins\",\r\n        unitPrice: 39,\r\n        discontinued: true,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P18\",\r\n        productName: \"Carnarvon Tigers\",\r\n        supplierID: \"S7\",\r\n        categoryID: \"C8\",\r\n        quantityPerUnit: \"16 kg pkg.\",\r\n        unitPrice: 62.5,\r\n        discontinued: false,\r\n        productImage: \"\"\r\n    },\r\n    {\r\n        productID: \"P19\",\r\n        productName: \"Teatime Chocolate Biscuits\",\r\n        supplierID: \"S8\",\r\n        categoryID: \"C3\",\r\n        quantityPerUnit: \"10 boxes x 12 pieces\",\r\n        unitPrice: 9.2,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Macau_Koi_Kei_Bakery_Almond_Biscuits_2.JPG/120px-Macau_Koi_Kei_Bakery_Almond_Biscuits_2.JPG\"\r\n    },\r\n    {\r\n        productID: \"P20\",\r\n        productName: \"Sir Rodney's Marmalade\",\r\n        supplierID: \"S8\",\r\n        categoryID: \"C3\",\r\n        quantityPerUnit: \"30 gift boxes\",\r\n        unitPrice: 81,\r\n        discontinued: false,\r\n        productImage:\r\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Homemade_marmalade%2C_England.jpg/135px-Homemade_marmalade%2C_England.jpg\"\r\n    }\r\n];\r\n\r\nconst categories = [\r\n    {\r\n        categoryID: \"C1\",\r\n        categoryName: \"Beverages\",\r\n        description: \"Soft drinks, coffees, teas, beers, and ales\"\r\n    },\r\n    {\r\n        categoryID: \"C2\",\r\n        categoryName: \"Condiments\",\r\n        description: \"Sweet and savory sauces, relishes, spreads, and seasonings\"\r\n    },\r\n    {\r\n        categoryID: \"C3\",\r\n        categoryName: \"Confections\",\r\n        description: \"Desserts, candies, and sweet breads\"\r\n    },\r\n    {\r\n        categoryID: \"C4\",\r\n        categoryName: \"Dairy Products\",\r\n        description: \"Cheeses\"\r\n    },\r\n    {\r\n        categoryID: \"C5\",\r\n        categoryName: \"Grains/Cereals\",\r\n        description: \"Breads, crackers, pasta, and cereal\"\r\n    },\r\n    {\r\n        categoryID: \"C6\",\r\n        categoryName: \"Meat/Poultry\",\r\n        description: \"Prepared meats\"\r\n    },\r\n    {\r\n        categoryID: \"C7\",\r\n        categoryName: \"Produce\",\r\n        description: \"Dried fruit and bean curd\"\r\n    },\r\n    {\r\n        categoryID: \"C8\",\r\n        categoryName: \"Seafood\",\r\n        description: \"Seaweed and fish\"\r\n    }\r\n];\r\n\r\nconst suppliers = [\r\n    {\r\n        supplierID: \"S1\",\r\n        companyName: \"Exotic Liquids\",\r\n        contactName: \"Charlotte Cooper\",\r\n        contactTitle: \"Purchasing Manager\"\r\n    },\r\n    {\r\n        supplierID: \"S2\",\r\n        companyName: \"New Orleans Cajun Delights\",\r\n        contactName: \"Shelley Burke\",\r\n        contactTitle: \"Order Administrator\"\r\n    },\r\n    {\r\n        supplierID: \"S3\",\r\n        companyName: \"Grandma Kelly's Homestead\",\r\n        contactName: \"Regina Murphy\",\r\n        contactTitle: \"Sales Representative\"\r\n    },\r\n    {\r\n        supplierID: \"S4\",\r\n        companyName: \"Tokyo Traders\",\r\n        contactName: \"Yoshi Nagase\",\r\n        contactTitle: \"Marketing Manager\",\r\n        address: \"9-8 Sekimai Musashino-shi\"\r\n    },\r\n    {\r\n        supplierID: \"S5\",\r\n        companyName: \"Cooperativa de Quesos 'Las Cabras'\",\r\n        contactName: \"Antonio del Valle Saavedra\",\r\n        contactTitle: \"Export Administrator\"\r\n    },\r\n    {\r\n        supplierID: \"S6\",\r\n        companyName: \"Mayumi's\",\r\n        contactName: \"Mayumi Ohno\",\r\n        contactTitle: \"Marketing Representative\"\r\n    },\r\n    {\r\n        supplierID: \"S7\",\r\n        companyName: \"Pavlova, Ltd.\",\r\n        contactName: \"Ian Devling\",\r\n        contactTitle: \"Marketing Manager\"\r\n    },\r\n    {\r\n        supplierID: \"S8\",\r\n        companyName: \"Specialty Biscuits, Ltd.\",\r\n        contactName: \"Peter Wilson\",\r\n        contactTitle: \"Sales Representative\"\r\n    }\r\n];\r\n\r\n\r\n/// Linked entity samples above\nCustomFunctions.associate(\"GETRANDOMLINKEDENTITY\", getRandomLinkedEntity);\nCustomFunctions.associate(\"GETLINKEDENTITYBYID\", getLinkedEntityById);\nCustomFunctions.associate(\"PRODUCTLINKEDENTITYSERVICE\", productLinkedEntityService);"],"names":["getRandom0to99","Math","floor","random","CustomFunctions","associate","first","second","message","console","log","input","value","format","type","basicValue","numberFormat","Excel","CellValueType","double","basicType","RangeValueType","properties","Name","string","layouts","compact","icon","EntityCompactLayoutIcons","airplane","formattedNumber","dependency","interval","invocation","result","resEntity","text","propNumber","timer","setInterval","setResult","onCanceled","clearInterval","async","context","RequestContext","sheet","workbook","worksheets","getActiveWorksheet","index","length","element","undefined","parameterAddresses","range","getRange","load","sync","run","values","latency","simulateLatency","Promise","resolve","setTimeout","date","Date","getTime","curDate","randomValue","entity","randomNumber","errorTypeString","errorType","ErrorCellValueType","errorSubType","toLowerCase","blocked","BlockedErrorCellValueSubType","dataTypeUnsupportedApp","busy","BusyErrorCellValueSubType","loadingImage","calc","CalcErrorCellValueSubType","tooDeeplyNested","connect","ConnectErrorCellValueSubType","externalLinksAccessFailed","div0","external","ExternalErrorCellValueSubType","unknown","field","FieldErrorCellValueSubType","webImageMissingFilePart","gettingData","notAvailable","name","null","num","NumErrorCellValueSubType","arrayTooLarge","ref","RefErrorCellValueSubType","externalLinksCalculatedRef","spill","SpillErrorCellValueSubType","collision","timeout","TimeoutErrorCellValueSubType","pythonTimeoutLimitReached","ValueErrorCellValueSubType","coerceStringToNumberInvalid","error","noMessage","ErrorCode","divisionByZero","invalidValue","Error","now","productsDomainId","addinDomainServiceId","defaultCulture","id","entityId","toString","domainId","serviceId","culture","productId","linkedEntityId","notAvailableError","productID","productLinkedEntity","Discontinued","cardLayout","title","property","sections","layout","collapsible","collapsed","address","mainImage","push","makeSimpleLinkedEntity","JSON","parse"],"sourceRoot":""}